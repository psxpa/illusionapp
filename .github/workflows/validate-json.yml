name: Validate JSON Files

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  validate-json:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Validate JSON syntax
      run: |
        echo "Validating JSON files..."
        python3 << 'EOF'
        import json
        import re
        import sys
        import os
        
        def validate_json_precise(filename):
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                # Intentar parsear
                json.loads(content)
                print(f"✅ {filename} is valid JSON")
                return True
                
            except json.JSONDecodeError as e:
                print(f"❌ {filename} has syntax errors")
                
                # Obtener línea exacta
                lines = content.split('\n')
                error_line = e.lineno
                error_col = e.colno
                real_error_line = error_line
                
                # DETECTAR ERROR REAL: Retroceder para errores de coma
                if "Expecting ',' delimiter" in e.msg or "Expecting ','" in e.msg:
                    # Buscar línea anterior que necesita coma
                    for i in range(error_line - 1, max(0, error_line - 4), -1):
                        if i > 0 and i <= len(lines):
                            line_content = lines[i-1].strip()
                            # Si la línea termina con " o } sin coma, ahí está el error real
                            if (line_content.endswith('"') or line_content.endswith('}')) and not line_content.endswith(','):
                                real_error_line = i
                                print(f"🎯 REAL error at line {real_error_line} (Python detected at line {error_line})")
                                print(f"💡 Error: Missing comma at end of line")
                                print(f"📄 Line {real_error_line}: {lines[real_error_line-1].strip()}")
                                print(f"    Should be: {lines[real_error_line-1].strip()},")
                                return False
                
                # Error normal (no de coma) - mostrar como antes
                print(f"📍 Error at line {error_line}, column {error_col}")
                print(f"💡 Error: {e.msg}")
                
                # Mostrar contexto
                if error_line <= len(lines):
                    print(f"📄 Line {error_line}: {lines[error_line-1].strip()}")
                    print(f"    {' ' * (error_col-1)}^")
                    
                return False
            except Exception as e:
                print(f"❌ Error reading {filename}: {e}")
                return False
        
        # Validar todos los JSON
        all_valid = True
        for filename in os.listdir('.'):
            if filename.endswith('.json'):
                if not validate_json_precise(filename):
                    all_valid = False
                    
        if not all_valid:
            sys.exit(1)
        EOF
        
    - name: Validate JSON structure
      run: |
        echo "Validating JSON structure..."
        python3 << 'EOF'
        import json
        import sys
        
        try:
            with open('tv_cristiano_plus.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            required_keys = ['version', 'languages', 'lastUpdate']
            for key in required_keys:
                if key not in data:
                    print(f"❌ Missing required key: {key}")
                    sys.exit(1)
            
            required_langs = ['en', 'es', 'pt']
            for lang in required_langs:
                if lang not in data['languages']:
                    print(f"❌ Missing language: {lang}")
                    sys.exit(1)
                
                if 'channels' not in data['languages'][lang]:
                    print(f"❌ Missing channels for language: {lang}")
                    sys.exit(1)
                
                channels = data['languages'][lang]['channels']
                for i, channel in enumerate(channels):
                    required_channel_keys = ['name', 'active', 'imageUrl', 'isIframe', 'streamUrl']
                    for key in required_channel_keys:
                        if key not in channel:
                            print(f"❌ Channel {i} in {lang} missing key: {key}")
                            sys.exit(1)
            
            print("✅ JSON structure is valid")
            print(f"📊 Found {len(data['languages']['en']['channels'])} English channels")
            print(f"📊 Found {len(data['languages']['es']['channels'])} Spanish channels") 
            print(f"📊 Found {len(data['languages']['pt']['channels'])} Portuguese channels")
            
        except json.JSONDecodeError as e:
            print(f"❌ JSON syntax error: {e}")
            sys.exit(1)
        except Exception as e:
            print(f"❌ Validation error: {e}")
            sys.exit(1)
        EOF
